worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;
        location / {
            default_type text/html;

            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }

        location = /sum {
            # 只允许内部调用
            internal;

            # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
            # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /subduction {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }

        location = /app/test {
            content_by_lua_block {
                local res1, res2 = ngx.location.capture_multi({
                                {"/sum", {args={a=3, b=8}}},
                                {"/subduction", {args={a=3, b=8}}}
                                })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
            }
        }
        
        #location = /app/test {
        #    content_by_lua_block {
        #        local res = ngx.location.capture(
        #                        "/sum", {args={a=3, b=8}}
        #                        )
        #        ngx.say("status:", res.status, " response:", res.body)
        #    }
        #}

        location = /foo {
            content_by_lua_block {
                ngx.say("i'm foo")
            }
        }

        location = /app/test2 {
            rewrite_by_lua_block {
                return ngx.redirect('/foo');  
            }
        }

        location = /app/uri {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                    ngx.say("[GET]  key:", k, " v:", v)
                end

                ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
                local arg = ngx.req.get_post_args()
                for k,v in pairs(arg) do
                    ngx.say("[POST] key:", k, " v:", v)
                end
            }
        }

        location /app/uri2 {
            content_by_lua_block {
                local res = ngx.location.capture(
                        '/app/uri',
                        { 
                           method = ngx.HTTP_POST, 
                           args = ngx.encode_args{a=1, b='2&'},
                           body = ngx.encode_args{c=3, d='4&'}
                        }
                    )
                ngx.say(res.body)
            }
        }
    }
}
